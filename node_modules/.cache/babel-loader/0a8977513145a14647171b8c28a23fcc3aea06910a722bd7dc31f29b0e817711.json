{"ast":null,"code":"var _jsxFileName = \"/Users/cyrus/Documents/Fall 2025/VIP/military_spouse_AI/src/components/RagChatWidget.js\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport ChatInterface from './ChatInterface';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateId = () => {\n  var _globalThis$crypto;\n  if (typeof globalThis !== 'undefined' && (_globalThis$crypto = globalThis.crypto) !== null && _globalThis$crypto !== void 0 && _globalThis$crypto.randomUUID) {\n    return globalThis.crypto.randomUUID();\n  }\n  return `msg_${Math.random().toString(36).slice(2, 10)}`;\n};\nconst normalizeMessage = (message, fallbackType = 'system') => ({\n  id: message.id ? message.id : generateId(),\n  type: message.type ? message.type : fallbackType,\n  content: message.content ? message.content : '',\n  timestamp: message.timestamp ? message.timestamp : new Date().toISOString()\n});\nconst RagChatWidget = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  apiUrl,\n  initialMessages = [],\n  placeholder,\n  maxLength\n}, ref) => {\n  _s();\n  const [messages, setMessages] = useState(initialMessages.map(msg => normalizeMessage(msg, 'bot')));\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesRef = useRef(messages);\n  const updateMessages = next => {\n    messagesRef.current = next;\n    setMessages(next);\n  };\n  const sendMessage = async rawText => {\n    const trimmed = rawText.trim();\n    if (!trimmed || !apiUrl) return;\n    const userMessage = normalizeMessage({\n      type: 'user',\n      content: trimmed\n    }, 'user');\n    updateMessages([...messagesRef.current, userMessage]);\n    setIsLoading(true);\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: trimmed\n        })\n      });\n      if (!response.ok) return;\n      const data = await response.json();\n      const replyText = typeof data === 'string' ? data : (data === null || data === void 0 ? void 0 : data.reply) || '';\n      if (!replyText.trim()) return;\n      const botMessage = normalizeMessage({\n        type: 'bot',\n        content: replyText\n      }, 'bot');\n      updateMessages([...messagesRef.current, botMessage]);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useImperativeHandle(ref, () => ({\n    sendMessage,\n    resetConversation: () => updateMessages(initialMessages.map(msg => normalizeMessage(msg, 'bot'))),\n    getMessages: () => messagesRef.current\n  }), [initialMessages]);\n  return /*#__PURE__*/_jsxDEV(ChatInterface, {\n    messages: messages,\n    onSendMessage: sendMessage,\n    isTyping: isLoading,\n    inputDisabled: isLoading,\n    placeholder: placeholder,\n    maxLength: maxLength\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 7\n  }, this);\n}, \"1RPEXyCZcr8xyM1PIgtxA5xoBUQ=\")), \"1RPEXyCZcr8xyM1PIgtxA5xoBUQ=\");\n_c2 = RagChatWidget;\nexport default RagChatWidget;\nvar _c, _c2;\n$RefreshReg$(_c, \"RagChatWidget$forwardRef\");\n$RefreshReg$(_c2, \"RagChatWidget\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useState","ChatInterface","jsxDEV","_jsxDEV","generateId","_globalThis$crypto","globalThis","crypto","randomUUID","Math","random","toString","slice","normalizeMessage","message","fallbackType","id","type","content","timestamp","Date","toISOString","RagChatWidget","_s","_c","apiUrl","initialMessages","placeholder","maxLength","ref","messages","setMessages","map","msg","isLoading","setIsLoading","messagesRef","updateMessages","next","current","sendMessage","rawText","trimmed","trim","userMessage","response","fetch","method","headers","body","JSON","stringify","ok","data","json","replyText","reply","botMessage","err","console","error","resetConversation","getMessages","onSendMessage","isTyping","inputDisabled","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/cyrus/Documents/Fall 2025/VIP/military_spouse_AI/src/components/RagChatWidget.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport ChatInterface from './ChatInterface';\n\nconst generateId = () => {\n  if (typeof globalThis !== 'undefined' && globalThis.crypto?.randomUUID) {\n    return globalThis.crypto.randomUUID();\n  }\n  return `msg_${Math.random().toString(36).slice(2, 10)}`;\n};\n\nconst normalizeMessage = (message, fallbackType = 'system') => ({\n  id: message.id ? message.id : generateId(),\n  type: message.type ? message.type : fallbackType,\n  content: message.content ? message.content : '',\n  timestamp: message.timestamp ? message.timestamp : new Date().toISOString()\n});\n\nconst RagChatWidget = forwardRef(\n  (\n    {\n      apiUrl,\n      initialMessages = [],\n      placeholder,\n      maxLength\n    },\n    ref\n  ) => {\n    const [messages, setMessages] = useState(\n      initialMessages.map((msg) => normalizeMessage(msg, 'bot'))\n    );\n    const [isLoading, setIsLoading] = useState(false);\n    const messagesRef = useRef(messages);\n\n    const updateMessages = (next) => {\n      messagesRef.current = next;\n      setMessages(next);\n    };\n\n    const sendMessage = async (rawText) => {\n      const trimmed = rawText.trim();\n      if (!trimmed || !apiUrl) return;\n\n      const userMessage = normalizeMessage({ type: 'user', content: trimmed }, 'user');\n      updateMessages([...messagesRef.current, userMessage]);\n      setIsLoading(true);\n\n      try {\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ message: trimmed })\n        });\n\n        if (!response.ok) return;\n\n        const data = await response.json();\n        const replyText = typeof data === 'string' ? data : data?.reply || '';\n\n        if (!replyText.trim()) return;\n\n        const botMessage = normalizeMessage({ type: 'bot', content: replyText }, 'bot');\n        updateMessages([...messagesRef.current, botMessage]);\n      } catch (err) {\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        sendMessage,\n        resetConversation: () => updateMessages(initialMessages.map((msg) => normalizeMessage(msg, 'bot'))),\n        getMessages: () => messagesRef.current\n      }),\n      [initialMessages]\n    );\n\n    return (\n      <ChatInterface\n        messages={messages}\n        onSendMessage={sendMessage}\n        isTyping={isLoading}\n        inputDisabled={isLoading}\n        placeholder={placeholder}\n        maxLength={maxLength}\n      />\n    );\n  }\n);\n\nexport default RagChatWidget;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}