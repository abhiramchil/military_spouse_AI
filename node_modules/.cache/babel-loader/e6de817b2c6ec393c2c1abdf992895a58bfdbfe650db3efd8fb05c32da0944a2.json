{"ast":null,"code":"var _jsxFileName = \"/Users/cyrus/Documents/Fall 2025/VIP/military_spouse_AI/src/components/RagChatWidget.js\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport ChatInterface from './ChatInterface';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultTransformResponse = payload => {\n  if (!payload) return '';\n  if (typeof payload === 'string') return payload;\n  if (typeof payload === 'object') {\n    var _ref, _ref2, _ref3, _payload$reply;\n    return (_ref = (_ref2 = (_ref3 = (_payload$reply = payload.reply) !== null && _payload$reply !== void 0 ? _payload$reply : payload.response) !== null && _ref3 !== void 0 ? _ref3 : payload.answer) !== null && _ref2 !== void 0 ? _ref2 : payload.output) !== null && _ref !== void 0 ? _ref : '';\n  }\n  return '';\n};\nconst defaultBuildRequestPayload = ({\n  message,\n  history,\n  metadata\n}) => {\n  const base = {\n    message\n  };\n  if (history && Array.isArray(history)) {\n    base.history = history;\n  }\n  return metadata ? {\n    ...base,\n    ...metadata\n  } : base;\n};\nconst generateId = () => {\n  var _globalThis$crypto;\n  if (typeof globalThis !== 'undefined' && (_globalThis$crypto = globalThis.crypto) !== null && _globalThis$crypto !== void 0 && _globalThis$crypto.randomUUID) {\n    return globalThis.crypto.randomUUID();\n  }\n  return `msg_${Math.random().toString(36).slice(2, 10)}`;\n};\nconst normalizeMessage = (message, fallbackType = 'system') => {\n  var _message$id, _message$type, _message$content, _message$timestamp;\n  return {\n    id: (_message$id = message.id) !== null && _message$id !== void 0 ? _message$id : generateId(),\n    type: (_message$type = message.type) !== null && _message$type !== void 0 ? _message$type : fallbackType,\n    content: (_message$content = message.content) !== null && _message$content !== void 0 ? _message$content : '',\n    timestamp: (_message$timestamp = message.timestamp) !== null && _message$timestamp !== void 0 ? _message$timestamp : new Date().toISOString()\n  };\n};\nconst defaultWelcomeMessage = {\n  type: 'bot',\n  content: \"Hello! I'm your AI career assistant. Ask me anything about job searches, resumes, or resources for military families.\"\n};\nconst getStartingMessages = source => source && source.length ? source.map(msg => normalizeMessage(msg, 'bot')) : [normalizeMessage(defaultWelcomeMessage, 'bot')];\nconst toHistory = messages => messages.filter(msg => msg.type === 'user' || msg.type === 'bot').map(msg => ({\n  role: msg.type === 'user' ? 'user' : 'assistant',\n  content: msg.content\n}));\nconst RagChatWidget = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  apiUrl,\n  headers = {},\n  initialMessages = [],\n  transformResponse = defaultTransformResponse,\n  buildRequestPayload = defaultBuildRequestPayload,\n  metadata,\n  includeHistory = true,\n  fetcher,\n  resetOnInitialMessagesChange = false,\n  placeholder,\n  maxLength,\n  onError,\n  onMessageAppended\n}, ref) => {\n  _s();\n  const [messages, setMessages] = useState(() => getStartingMessages(initialMessages));\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [pendingRetry, setPendingRetry] = useState(null);\n  const messagesRef = useRef(messages);\n  useEffect(() => {\n    messagesRef.current = messages;\n  }, [messages]);\n  useEffect(() => {\n    if (!resetOnInitialMessagesChange || !initialMessages.length) return;\n    const normalized = getStartingMessages(initialMessages);\n    messagesRef.current = normalized;\n    setMessages(normalized);\n  }, [initialMessages, resetOnInitialMessagesChange]);\n  const fetchClient = fetcher !== null && fetcher !== void 0 ? fetcher : fetch;\n  const sendMessage = useCallback(async rawText => {\n    const trimmed = rawText.trim();\n    if (!trimmed) {\n      return;\n    }\n    const userMessage = normalizeMessage({\n      type: 'user',\n      content: trimmed\n    }, 'user');\n    const nextMessages = [...messagesRef.current, userMessage];\n    messagesRef.current = nextMessages;\n    setMessages(nextMessages);\n    setIsLoading(true);\n    setError(null);\n    setPendingRetry(null);\n    if (!apiUrl) {\n      const missingUrlMessage = 'Missing apiUrl for RagChatWidget. Provide the endpoint of your Python RAG service.';\n      setError(missingUrlMessage);\n      setPendingRetry({\n        message: trimmed,\n        userMessageId: userMessage.id\n      });\n      setIsLoading(false);\n      return;\n    }\n    const historyPayload = includeHistory ? toHistory(nextMessages) : undefined;\n    const requestBody = buildRequestPayload({\n      message: trimmed,\n      history: historyPayload,\n      metadata\n    });\n    try {\n      const response = await fetchClient(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...headers\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || `Request failed with status ${response.status}`);\n      }\n      const data = await response.json().catch(() => {\n        throw new Error('Received invalid JSON from the chatbot service.');\n      });\n      const reply = transformResponse(data, {\n        message: trimmed,\n        history: historyPayload\n      });\n      if (reply === undefined || reply === null) {\n        throw new Error('The chatbot returned an empty response. Adjust transformResponse or check the backend payload.');\n      }\n      const replyText = typeof reply === 'string' ? reply : String(reply !== null && reply !== void 0 ? reply : '');\n      if (!replyText.trim()) {\n        throw new Error('The chatbot returned an empty response. Adjust transformResponse or check the backend payload.');\n      }\n      const botMessage = normalizeMessage({\n        type: 'bot',\n        content: replyText\n      }, 'bot');\n      const resolvedMessages = [...messagesRef.current, botMessage];\n      messagesRef.current = resolvedMessages;\n      setMessages(resolvedMessages);\n      onMessageAppended === null || onMessageAppended === void 0 ? void 0 : onMessageAppended(botMessage, resolvedMessages);\n    } catch (err) {\n      const fallbackMessage = err instanceof Error ? err.message : 'Unable to reach the chatbot service.';\n      setError(fallbackMessage);\n      setPendingRetry({\n        message: trimmed,\n        userMessageId: userMessage.id\n      });\n      onError === null || onError === void 0 ? void 0 : onError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [apiUrl, buildRequestPayload, fetchClient, headers, includeHistory, metadata, onError, onMessageAppended, transformResponse]);\n  const retryLastMessage = useCallback(() => {\n    if (!pendingRetry) return;\n    const filtered = messagesRef.current.filter(msg => msg.id !== pendingRetry.userMessageId);\n    messagesRef.current = filtered;\n    setMessages(filtered);\n    const messageToResend = pendingRetry.message;\n    setPendingRetry(null);\n    sendMessage(messageToResend);\n  }, [pendingRetry, sendMessage]);\n  const resetConversation = useCallback(() => {\n    const normalized = getStartingMessages(initialMessages);\n    messagesRef.current = normalized;\n    setMessages(normalized);\n    setError(null);\n    setPendingRetry(null);\n  }, [initialMessages]);\n  useImperativeHandle(ref, () => ({\n    sendMessage,\n    resetConversation,\n    getMessages: () => messagesRef.current\n  }), [resetConversation, sendMessage]);\n  return /*#__PURE__*/_jsxDEV(ChatInterface, {\n    messages: messages,\n    onSendMessage: sendMessage,\n    isTyping: isLoading,\n    error: error,\n    onRetry: pendingRetry ? retryLastMessage : null,\n    inputDisabled: isLoading,\n    placeholder: placeholder,\n    maxLength: maxLength\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 7\n  }, this);\n}, \"2Bc8KocWOwLA9q5VlPptV7E90i8=\")), \"2Bc8KocWOwLA9q5VlPptV7E90i8=\");\n_c2 = RagChatWidget;\nexport default RagChatWidget;\nvar _c, _c2;\n$RefreshReg$(_c, \"RagChatWidget$forwardRef\");\n$RefreshReg$(_c2, \"RagChatWidget\");","map":{"version":3,"names":["React","forwardRef","useCallback","useEffect","useImperativeHandle","useRef","useState","ChatInterface","jsxDEV","_jsxDEV","defaultTransformResponse","payload","_ref","_ref2","_ref3","_payload$reply","reply","response","answer","output","defaultBuildRequestPayload","message","history","metadata","base","Array","isArray","generateId","_globalThis$crypto","globalThis","crypto","randomUUID","Math","random","toString","slice","normalizeMessage","fallbackType","_message$id","_message$type","_message$content","_message$timestamp","id","type","content","timestamp","Date","toISOString","defaultWelcomeMessage","getStartingMessages","source","length","map","msg","toHistory","messages","filter","role","RagChatWidget","_s","_c","apiUrl","headers","initialMessages","transformResponse","buildRequestPayload","includeHistory","fetcher","resetOnInitialMessagesChange","placeholder","maxLength","onError","onMessageAppended","ref","setMessages","isLoading","setIsLoading","error","setError","pendingRetry","setPendingRetry","messagesRef","current","normalized","fetchClient","fetch","sendMessage","rawText","trimmed","trim","userMessage","nextMessages","missingUrlMessage","userMessageId","historyPayload","undefined","requestBody","method","body","JSON","stringify","ok","errorText","text","Error","status","data","json","catch","replyText","String","botMessage","resolvedMessages","err","fallbackMessage","retryLastMessage","filtered","messageToResend","resetConversation","getMessages","onSendMessage","isTyping","onRetry","inputDisabled","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/cyrus/Documents/Fall 2025/VIP/military_spouse_AI/src/components/RagChatWidget.js"],"sourcesContent":["import React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState\n} from 'react';\nimport ChatInterface from './ChatInterface';\n\nconst defaultTransformResponse = (payload) => {\n  if (!payload) return '';\n  if (typeof payload === 'string') return payload;\n  if (typeof payload === 'object') {\n    return (\n      payload.reply ??\n      payload.response ??\n      payload.answer ??\n      payload.output ??\n      ''\n    );\n  }\n  return '';\n};\n\nconst defaultBuildRequestPayload = ({ message, history, metadata }) => {\n  const base = { message };\n  if (history && Array.isArray(history)) {\n    base.history = history;\n  }\n  return metadata ? { ...base, ...metadata } : base;\n};\n\nconst generateId = () => {\n  if (typeof globalThis !== 'undefined' && globalThis.crypto?.randomUUID) {\n    return globalThis.crypto.randomUUID();\n  }\n  return `msg_${Math.random().toString(36).slice(2, 10)}`;\n};\n\nconst normalizeMessage = (message, fallbackType = 'system') => ({\n  id: message.id ?? generateId(),\n  type: message.type ?? fallbackType,\n  content: message.content ?? '',\n  timestamp: message.timestamp ?? new Date().toISOString()\n});\n\nconst defaultWelcomeMessage = {\n  type: 'bot',\n  content:\n    \"Hello! I'm your AI career assistant. Ask me anything about job searches, resumes, or resources for military families.\"\n};\n\nconst getStartingMessages = (source) =>\n  source && source.length\n    ? source.map((msg) => normalizeMessage(msg, 'bot'))\n    : [normalizeMessage(defaultWelcomeMessage, 'bot')];\n\nconst toHistory = (messages) =>\n  messages\n    .filter((msg) => msg.type === 'user' || msg.type === 'bot')\n    .map((msg) => ({\n      role: msg.type === 'user' ? 'user' : 'assistant',\n      content: msg.content\n    }));\n\nconst RagChatWidget = forwardRef(\n  (\n    {\n      apiUrl,\n      headers = {},\n      initialMessages = [],\n      transformResponse = defaultTransformResponse,\n      buildRequestPayload = defaultBuildRequestPayload,\n      metadata,\n      includeHistory = true,\n      fetcher,\n      resetOnInitialMessagesChange = false,\n      placeholder,\n      maxLength,\n      onError,\n      onMessageAppended\n    },\n    ref\n  ) => {\n    const [messages, setMessages] = useState(() =>\n      getStartingMessages(initialMessages)\n    );\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [pendingRetry, setPendingRetry] = useState(null);\n\n    const messagesRef = useRef(messages);\n\n    useEffect(() => {\n      messagesRef.current = messages;\n    }, [messages]);\n\n    useEffect(() => {\n      if (!resetOnInitialMessagesChange || !initialMessages.length) return;\n      const normalized = getStartingMessages(initialMessages);\n      messagesRef.current = normalized;\n      setMessages(normalized);\n    }, [initialMessages, resetOnInitialMessagesChange]);\n\n    const fetchClient = fetcher ?? fetch;\n\n    const sendMessage = useCallback(\n      async (rawText) => {\n        const trimmed = rawText.trim();\n        if (!trimmed) {\n          return;\n        }\n\n        const userMessage = normalizeMessage(\n          { type: 'user', content: trimmed },\n          'user'\n        );\n\n        const nextMessages = [...messagesRef.current, userMessage];\n        messagesRef.current = nextMessages;\n        setMessages(nextMessages);\n        setIsLoading(true);\n        setError(null);\n        setPendingRetry(null);\n\n        if (!apiUrl) {\n          const missingUrlMessage =\n            'Missing apiUrl for RagChatWidget. Provide the endpoint of your Python RAG service.';\n          setError(missingUrlMessage);\n          setPendingRetry({\n            message: trimmed,\n            userMessageId: userMessage.id\n          });\n          setIsLoading(false);\n          return;\n        }\n\n        const historyPayload = includeHistory\n          ? toHistory(nextMessages)\n          : undefined;\n\n        const requestBody = buildRequestPayload({\n          message: trimmed,\n          history: historyPayload,\n          metadata\n        });\n\n        try {\n          const response = await fetchClient(apiUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              ...headers\n            },\n            body: JSON.stringify(requestBody)\n          });\n\n          if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(\n              errorText || `Request failed with status ${response.status}`\n            );\n          }\n\n          const data = await response.json().catch(() => {\n            throw new Error('Received invalid JSON from the chatbot service.');\n          });\n\n          const reply = transformResponse(data, {\n            message: trimmed,\n            history: historyPayload\n          });\n\n          if (reply === undefined || reply === null) {\n            throw new Error(\n              'The chatbot returned an empty response. Adjust transformResponse or check the backend payload.'\n            );\n          }\n\n          const replyText =\n            typeof reply === 'string' ? reply : String(reply ?? '');\n\n          if (!replyText.trim()) {\n            throw new Error(\n              'The chatbot returned an empty response. Adjust transformResponse or check the backend payload.'\n            );\n          }\n\n          const botMessage = normalizeMessage(\n            { type: 'bot', content: replyText },\n            'bot'\n          );\n\n          const resolvedMessages = [...messagesRef.current, botMessage];\n          messagesRef.current = resolvedMessages;\n          setMessages(resolvedMessages);\n          onMessageAppended?.(botMessage, resolvedMessages);\n        } catch (err) {\n          const fallbackMessage =\n            err instanceof Error\n              ? err.message\n              : 'Unable to reach the chatbot service.';\n          setError(fallbackMessage);\n          setPendingRetry({\n            message: trimmed,\n            userMessageId: userMessage.id\n          });\n          onError?.(err);\n        } finally {\n          setIsLoading(false);\n        }\n      },\n      [\n        apiUrl,\n        buildRequestPayload,\n        fetchClient,\n        headers,\n        includeHistory,\n        metadata,\n        onError,\n        onMessageAppended,\n        transformResponse\n      ]\n    );\n\n    const retryLastMessage = useCallback(() => {\n      if (!pendingRetry) return;\n      const filtered = messagesRef.current.filter(\n        (msg) => msg.id !== pendingRetry.userMessageId\n      );\n      messagesRef.current = filtered;\n      setMessages(filtered);\n      const messageToResend = pendingRetry.message;\n      setPendingRetry(null);\n      sendMessage(messageToResend);\n    }, [pendingRetry, sendMessage]);\n\n    const resetConversation = useCallback(() => {\n      const normalized = getStartingMessages(initialMessages);\n      messagesRef.current = normalized;\n      setMessages(normalized);\n      setError(null);\n      setPendingRetry(null);\n    }, [initialMessages]);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        sendMessage,\n        resetConversation,\n        getMessages: () => messagesRef.current\n      }),\n      [resetConversation, sendMessage]\n    );\n\n    return (\n      <ChatInterface\n        messages={messages}\n        onSendMessage={sendMessage}\n        isTyping={isLoading}\n        error={error}\n        onRetry={pendingRetry ? retryLastMessage : null}\n        inputDisabled={isLoading}\n        placeholder={placeholder}\n        maxLength={maxLength}\n      />\n    );\n  }\n);\n\nexport default RagChatWidget;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}